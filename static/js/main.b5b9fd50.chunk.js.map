{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","concat","App","_useState","useState","_useState2","_slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","checkIfWalletIsConnected","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","solana","response","wrap","_context","prev","next","window","isPhantom","console","log","connect","onlyIfTrusted","sent","publicKey","toString","alert","t0","error","stop","apply","arguments","connectWallet","_ref2","_callee2","_window2","_context2","onInputChange","event","value","target","getProvider","connection","Connection","AnchorProvider","createGifAccount","_ref3","_callee3","provider","program","_context3","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","_ref4","_callee4","_context4","length","abrupt","addGif","useEffect","onLoad","_ref5","_callee5","_context5","addEventListener","removeEventListener","_ref6","_callee6","account","_context6","fetch","_jsx","className","children","_jsxs","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"4NAAe,MAA0B,yC,gDCSjCA,EAA2BC,IAA3BD,cAGFE,GAH6BD,IAAZE,QAGXC,OAAOC,OAAOC,EAAGC,SAASC,YAChCC,EAAS,IAAIC,WAAWR,GACxBS,EAAcV,IAAKE,QAAQS,cAAcH,GAGzCI,EAAY,IAAIC,YAAUC,EAAIC,SAASC,SAGvCC,EAAUC,wBAAc,UAGxBC,EACiB,YAOjBC,EAAiB,WACjBC,EAAY,uBAAAC,OAA0BF,GAkO7BG,EAzNH,WAEV,IAAAC,EAA0CC,mBAAS,MAAKC,EAAAC,YAAAH,EAAA,GAAjDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,EAAoCL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAA8BT,mBAAS,IAAGU,EAAAR,YAAAO,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAGpBG,EAAwB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,cAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEf,GAFeF,EAAAC,KAAA,EAAAL,EAEVO,SAAXN,EAAMD,EAANC,QAEG,CAADG,EAAAE,KAAA,aACJL,EAAOO,UAAU,CAADJ,EAAAE,KAAA,SACwB,OAA1CG,QAAQC,IAAI,8BAA8BN,EAAAE,KAAA,EACnBL,EAAOU,QAAQ,CAAEC,eAAe,IAAQ,KAAD,EAAxDV,EAAQE,EAAAS,KACdJ,QAAQC,IACN,oCACAR,EAASY,UAAUC,YAMrB9B,EAAiBiB,EAASY,UAAUC,YAAY,QAAAX,EAAAE,KAAA,iBAGlDU,MAAM,0EAA6D,QAAAZ,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAa,GAAAb,EAAA,SAGrEK,QAAQS,MAAKd,EAAAa,IAAQ,yBAAAb,EAAAe,OAAA,GAAApB,EAAA,mBAExB,kBAxB6B,OAAAJ,EAAAyB,MAAA,KAAAC,UAAA,KA0BxBC,EAAa,eAAAC,EAAA3B,YAAAC,cAAAC,MAAG,SAAA0B,IAAA,IAAAC,EAAAxB,EAAAC,EAAA,OAAAL,cAAAM,MAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OACR,GADQmB,EACHlB,SAAXN,EAAMwB,EAANxB,QAEG,CAADyB,EAAApB,KAAA,eAAAoB,EAAApB,KAAA,EACeL,EAAOU,UAAU,KAAD,EAAjCT,EAAQwB,EAAAb,KACdJ,QAAQC,IACN,oCACAR,EAASY,UAAUC,YAErB9B,EAAiBiB,EAASY,UAAUC,YAAY,wBAAAW,EAAAP,OAAA,GAAAK,EAAA,KAEnD,kBAXoB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAkEbM,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACRxC,EAAcwC,EAChB,EAEME,EAAc,WAClB,IAAMC,EAAa,IAAIC,aAAW5D,EAASE,GAI3C,OAHiB,IAAI2D,IACnBF,EAAYzB,OAAON,OAAQ1B,EAG/B,EAEM4D,EAAgB,eAAAC,EAAAxC,YAAAC,cAAAC,MAAG,SAAAuC,IAAA,IAAAC,EAAAC,EAAA,OAAA1C,cAAAM,MAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OAIF,OAJEkC,EAAAnC,KAAA,EAEfiC,EAAWP,IACXQ,EAAU,IAAIE,IAAQvE,EAAKF,EAAWsE,GAC5C7B,QAAQC,IAAI,QAAO8B,EAAAlC,KAAA,EACbiC,EAAQG,IAAIC,cAAc,CAC9BC,SAAU,CACR9E,YAAaA,EAAYgD,UACzB+B,KAAMP,EAASQ,OAAOhC,UACtBiC,cAAe5F,EAAc6F,WAE/BC,QAAS,CAACnF,KACT,KAAD,EAC8F,OAAhG2C,QAAQC,IAAI,qDAAmD5C,EAAYgD,UAAUC,YAAWyB,EAAAlC,KAAA,EAC1F4C,IAAa,KAAD,EAAAV,EAAAlC,KAAA,iBAAAkC,EAAAnC,KAAA,GAAAmC,EAAAvB,GAAAuB,EAAA,SAGlB/B,QAAQC,IAAI,qCAAoC8B,EAAAvB,IAAQ,yBAAAuB,EAAArB,OAAA,GAAAkB,EAAA,mBAE3D,kBAnBqB,OAAAD,EAAAhB,MAAA,KAAAC,UAAA,KAqBhB8B,EAAO,eAAAC,EAAAxD,YAAAC,cAAAC,MAAG,SAAAuD,IAAA,IAAAf,EAAAC,EAAA,OAAA1C,cAAAM,MAAA,SAAAmD,GAAA,cAAAA,EAAAjD,KAAAiD,EAAAhD,MAAA,UACY,IAAtBlB,EAAWmE,OAAY,CAAAD,EAAAhD,KAAA,QACkB,OAA3CG,QAAQC,IAAI,gCAA+B4C,EAAAE,OAAA,iBAOU,OAJvDnE,EAAc,IACdoB,QAAQC,IAAI,eAAgBtB,GAAYkE,EAAAjD,KAAA,EAEhCiC,EAAWP,IACXQ,EAAU,IAAIE,IAAQvE,EAAKF,EAAWsE,GAASgB,EAAAhD,KAAA,GAE/CiC,EAAQG,IAAIe,OAAOrE,EAAY,CACnCwD,SAAU,CACR9E,YAAaA,EAAYgD,UACzB+B,KAAMP,EAASQ,OAAOhC,aAEvB,KAAD,GACgE,OAAlEL,QAAQC,IAAI,0CAA2CtB,GAAWkE,EAAAhD,KAAA,GAE5D4C,IAAa,KAAD,GAAAI,EAAAhD,KAAA,iBAAAgD,EAAAjD,KAAA,GAAAiD,EAAArC,GAAAqC,EAAA,SAElB7C,QAAQC,IAAI,qBAAoB4C,EAAArC,IAAQ,yBAAAqC,EAAAnC,OAAA,GAAAkC,EAAA,mBAE3C,kBAvBY,OAAAD,EAAAhC,MAAA,KAAAC,UAAA,KA0BbqC,qBAAU,WACR,IAAMC,EAAM,eAAAC,EAAAhE,YAAAC,cAAAC,MAAG,SAAA+D,IAAA,OAAAhE,cAAAM,MAAA,SAAA2D,GAAA,cAAAA,EAAAzD,KAAAyD,EAAAxD,MAAA,cAAAwD,EAAAxD,KAAA,EACPZ,IAA2B,KAAD,mBAAAoE,EAAA3C,OAAA,GAAA0C,EAAA,KACjC,kBAFW,OAAAD,EAAAxC,MAAA,KAAAC,UAAA,KAIZ,OADAd,OAAOwD,iBAAiB,OAAQJ,GACzB,kBAAMpD,OAAOyD,oBAAoB,OAAQL,EAAQ,CAC1D,GAAG,IAIL,IAAMT,EAAU,eAAAe,EAAArE,YAAAC,cAAAC,MAAG,SAAAoE,IAAA,IAAA5B,EAAAC,EAAA4B,EAAA,OAAAtE,cAAAM,MAAA,SAAAiE,GAAA,cAAAA,EAAA/D,KAAA+D,EAAA9D,MAAA,OAGsC,OAHtC8D,EAAA/D,KAAA,EAETiC,EAAWP,IACXQ,EAAU,IAAIE,IAAQvE,EAAKF,EAAWsE,GAAS8B,EAAA9D,KAAA,EAC/BiC,EAAQ4B,QAAQrG,YAAYuG,MAAMvG,EAAYgD,WAAW,KAAD,EAAxEqD,EAAOC,EAAAvD,KAEbJ,QAAQC,IAAI,eAAgByD,GAC5B1E,EAAW0E,EAAQ3E,SAAQ4E,EAAA9D,KAAA,iBAAA8D,EAAA/D,KAAA,GAAA+D,EAAAnD,GAAAmD,EAAA,SAG3B3D,QAAQC,IAAI,uBAAsB0D,EAAAnD,IAClCxB,EAAW,MAAM,yBAAA2E,EAAAjD,OAAA,GAAA+C,EAAA,mBAEpB,kBAbe,OAAAD,EAAA7C,MAAA,KAAAC,UAAA,KAsBd,OAPFqC,qBAAU,WACJ1E,IACFyB,QAAQC,IAAI,6BACZwC,IAEJ,GAAG,CAAClE,IAGAsF,cAAA,OAAKC,UAAU,MAAKC,SAElBC,eAAA,OAAKF,UAAWvF,EAAgB,mBAAqB,YAAYwF,SAAA,CAC/DC,eAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC/BF,cAAA,KAAGC,UAAU,SAAQC,SAAC,sCACtBF,cAAA,KAAGC,UAAU,WAAUC,SAAC,2DAEtBxF,GAxJRsF,cAAA,UACEC,UAAU,mCACVG,QAASpD,EAAckD,SACxB,yBAuJIxF,IAhJa,OAAZQ,EAEA8E,cAAA,OAAKC,UAAU,sBAAqBC,SAClCF,cAAA,UAAQC,UAAU,+BAA+BG,QAASvC,EAAiBqC,SAAC,oEAS9EC,eAAA,OAAKF,UAAU,sBAAqBC,SAAA,CAClCC,eAAA,QACEE,SAAU,SAAC/C,GACTA,EAAMgD,iBACNzB,GACF,EAAEqB,SAAA,CAEFF,cAAA,SACEO,KAAK,OACLC,YAAY,2BACZjD,MAAOzC,EACP2F,SAAUpD,IAEZ2C,cAAA,UAAQO,KAAK,SAASN,UAAU,+BAA8BC,SAAC,cAIjEF,cAAA,OAAKC,UAAU,WAAUC,SAEtBhF,EAAQwF,KAAI,SAACC,EAAMC,GAAK,OACvBZ,cAAA,OAAKC,UAAU,WAAUC,SACvBF,cAAA,OAAKa,IAAKF,EAAKG,WADcF,EAEzB,aAgHdT,eAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC/BF,cAAA,OAAKe,IAAI,eAAed,UAAU,eAAeY,IAAKG,IACtDhB,cAAA,KACEC,UAAU,cACVgB,KAAM9G,EACNqD,OAAO,SACP0D,IAAI,aAAYhB,SAAA,cAAA9F,OACFF,YAK1B,EC3PAiH,IAASC,OACPpB,cAACqB,IAAMC,WAAU,CAAApB,SACfF,cAAC3F,EAAG,MAENkH,SAASC,eAAe,Q","file":"static/js/main.b5b9fd50.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.4844b78f.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport twitterLogo from \"./assets/twitter-logo.svg\";\r\nimport \"./App.css\";\r\nimport idl from './idl.json';\r\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\r\nimport { Program, AnchorProvider, web3 } from '@project-serum/anchor';\r\nimport kp from './keypair.json'\r\n\r\n// SystemProgram é uma referencia ao 'executor' (runtime) da Solana!\r\nconst { SystemProgram, Keypair } = web3;\r\n\r\n\r\nconst arr = Object.values(kp._keypair.secretKey)\r\nconst secret = new Uint8Array(arr)\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\r\n\r\n// Obtém o id do nosso programa do arquivo IDL.\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Define nossa rede para devnet.\r\nconst network = clusterApiUrl('devnet');\r\n\r\n// Controla como queremos 'saber' quando uma transação está 'pronta'.\r\nconst opts = {\r\n  preflightCommitment: \"processed\"\r\n}\r\n\r\n\r\n\r\n\r\n// Constantes\r\nconst TWITTER_HANDLE = \"web3dev_\";\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\nconst TEST_GIFS = [\r\n  \"https://i.giphy.com/media/xUOxffMyVjqAnuJpJu/giphy.webp\",\r\n  \"https://media3.giphy.com/media/26n7aJwq73ubRevoQ/giphy.gif?cid=ecf05e47gpuxzul6z0774k47hcjp5p74uwfbfaq4xfjjco0c&rid=giphy.gif&ct=g\",\r\n  \"https://media3.giphy.com/media/3o7aD5euYKz5Ly7Wq4/giphy.gif?cid=ecf05e47gx235xsfy7tqmzvhwz06ztzaxr63av1f446mlluz&rid=giphy.gif&ct=g\",\r\n  \"https://media2.giphy.com/media/XKwfxBDG32ayrLHfAY/giphy.gif?cid=ecf05e47he0xf0mwnfx51x1f6m0wi4hzi52ql2dh0lnfe0tk&rid=giphy.gif&ct=g\",\r\n];\r\n\r\n\r\nconst App = () => {\r\n  // State\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  // Ações\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log(\"Phantom wallet encontrada!\");\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            \"Conectado com a Chave Pública:\",\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          /*\r\n           * Define a chave pública do usuário no estado para ser usado posteriormente!\r\n           */\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert(\"Objeto Solana não encontrado! Instale a Phantom Wallet 👻\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n  const { solana } = window;\r\n\r\n  if (solana) {\r\n    const response = await solana.connect();\r\n    console.log(\r\n      \"Conectado com a Chave Pública:\",\r\n      response.publicKey.toString()\r\n    );\r\n    setWalletAddress(response.publicKey.toString());\r\n  }\r\n};\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Conecte sua carteira\r\n    </button>\r\n  );\r\n\r\n  const renderConnectedContainer = () => {\r\n    // Se chegarmos aqui, significa que a conta do programa não foi inicializada.\r\n      if (gifList === null) {\r\n        return (\r\n          <div className=\"connected-container\">\r\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\r\n              Fazer inicialização única para conta do programa GIF\r\n            </button>\r\n          </div>\r\n        )\r\n      } \r\n      // Caso contrário, estamos bem! A conta existe. Usuários podem submeter GIFs.\r\n      else {\r\n        return(\r\n          <div className=\"connected-container\">\r\n            <form\r\n              onSubmit={(event) => {\r\n                event.preventDefault();\r\n                sendGif();\r\n              }}\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Entre com o link do GIF!\"\r\n                value={inputValue}\r\n                onChange={onInputChange}\r\n              />\r\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n                Enviar\r\n              </button>\r\n            </form>\r\n            <div className=\"gif-grid\">\r\n              {/* Usamos o indice (index) como chave (key), também o 'src' agora é 'item.gifLink' */}\r\n              {gifList.map((item, index) => (\r\n                <div className=\"gif-item\" key={index}>\r\n                  <img src={item.gifLink} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n    }\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new AnchorProvider(\r\n      connection, window.solana, opts.preflightCommitment,\r\n    );\r\n    return provider;\r\n  }\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      console.log(\"ping\")\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount]\r\n      });\r\n      console.log(\"BaseAccount criado com sucesso com o endereço :\", baseAccount.publicKey.toString())\r\n      await getGifList();\r\n    \r\n    } catch(error) {\r\n      console.log(\"Erro criando uma nova BaseAccount:\", error)\r\n    }\r\n  }\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"Nenhum link de GIF foi dado!\")\r\n      return\r\n    }\r\n    setInputValue('');\r\n    console.log('Link do GIF:', inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n  \r\n      await program.rpc.addGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF enviado com sucesso para o programa\", inputValue)\r\n  \r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Erro enviando GIF:\", error)\r\n    }\r\n  };\r\n\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener(\"load\", onLoad);\r\n    return () => window.removeEventListener(\"load\", onLoad);\r\n  }, []);\r\n\r\n\r\n\r\nconst getGifList = async() => {\r\n  try {\r\n    const provider = getProvider();\r\n    const program = new Program(idl, programID, provider);\r\n    const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\r\n    \r\n    console.log(\"Conta obtida\", account)\r\n    setGifList(account.gifList)\r\n\r\n  } catch (error) {\r\n    console.log(\"Erro em getGifList: \", error)\r\n    setGifList(null);\r\n  }\r\n}\r\n\r\nuseEffect(() => {\r\n  if (walletAddress) {\r\n    console.log('Obtendo a lista de GIF...');\r\n    getGifList()\r\n  }\r\n}, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Isso só foi adicionar para um estilozinho */}\r\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">🏀GIF HOOPS🏀</p>\r\n          <p className=\"sub-text\">Coleção de GIF de Basquete na blockchain Solana</p>\r\n          {/* Adiciona a condição para mostrar isso apenas se não tivermos um endereço de carteira */}\r\n          {!walletAddress && renderNotConnectedContainer()}\r\n            {/* Precisamos apenas adicionar o inverso aqui! */}\r\n        {walletAddress && renderConnectedContainer()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`feito por @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}